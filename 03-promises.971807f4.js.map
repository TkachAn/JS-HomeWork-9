{"mappings":"AAEaA,SAASC,MAAM,GACvBC,iBAAiB,UAAWC,IAChCA,EAAMC,iBACN,MACCC,UAAUC,MAACA,EAAKC,KAACA,EAAIC,OAACA,IACnBL,EAAMM,cACVC,QAAQC,IAAI,SAAUL,EAAMM,OAC5B,MAAMC,EAAKP,EAAMM,MACXE,EAAKN,EAAOI,MACZG,EAAKR,EAAKK,MAEhBI,YAAYH,IACXH,QAAQC,IAAI,KAGXM,EAAcH,EAAIC,GACjBG,KAAK,uBAAqBJ,QAAWC,OAAQI,MAC3C,sBAAKL,QAA0BC,SAEjCF,MAEJ,MAAMI,EAAgB,CAACG,EAASd,IACvB,IAAIe,SAAQ,CAACC,EAASC,KAC3Bb,QAAQC,IAAI,SAASL,KACxB,IAAIkB,EAAM,EAGLC,EAAUC,aAAY,KACHC,KAAKC,SAAW,IAErCN,EAAQ,qBAAqBF,QAAed,KAC5CI,QAAQC,IAAI,gBAAiBS,EAAS,OAAQI,EAAIlB,KAElDiB,EAAO,oBAAoBH,QAAed,KAC1CI,QAAQC,IAAI,eAAgBS,EAAS,OAAQI,EAAIlB,IAEjDI,QAAQC,IAAI,QAASa,EAAI,OAAQA,EAAIlB,GAClCkB,EAAMJ,EAAS,GAClBS,cAAcJ,GAGfD,MACClB","sources":["src/js/03-promises.js"],"sourcesContent":["//import Notiflix from 'notiflix';\n// const form = document.querySelector(\".form\");\nconst form = document.forms[0];\nform.addEventListener(\"submit\", (event) => {\n\tevent.preventDefault();\n\tconst {\n\t\telements: {delay,step,amount}\n\t} = event.currentTarget;\n\tconsole.log(\"delay \", delay.value);\n\tconst dv = delay.value;\n\tconst av = amount.value;\n\tconst sv = step.value;\n\n\tsetTimeout((dv) => {\n\t\tconsole.log(\"g\");\n\t\t// return new Promise((resolve, reject) => {\n\t\t// \tresolve({ av, sv });\n\t\t\tcreatePromise(av, sv)\n\t\t\t.then(`✅ Fulfilled promise ${av} in ${sv}ms`)\n\t\t\t.catch(`❌ Rejected promise ${av} in ${sv}ms`);\n\t\t//})\n\t}, dv);\n});//.\nconst createPromise = (position,delay )=> {\n  return new Promise((resolve, reject) => {\n    console.log(`delay ${delay}`);\n\tlet cnt = 1;\n\t\t// const av = amount.value;\n\t\t// const sv = step.value;\n\t\tlet counter = setInterval(() => {\n\t\t\tconst shouldResolve = Math.random() > 0.3;\n\t\t\tif (shouldResolve) {\n\t\t\t\tresolve(`Fulfilled promise ${position} in ${delay}`);\n\t\t\t\tconsole.log(\"resolve step:\", position,\" ms:\", cnt*delay);\t// Fulfill\n\t\t\t} else {\n\t\t\t\treject(`rejected promise ${position} in ${delay}`);\n\t\t\t\tconsole.log(\"reject step:\", position,\" ms:\", cnt*delay);\t// Reject\n\t\t\t}\n\t\t\t console.log(\"step:\", cnt,\" ms:\", cnt*delay);\n\t\t\tif (cnt > position-1) {\n\t\t\t\tclearInterval(counter);\n\t\t\t}\n\t\t\t// ++cnt;\n\t\t\tcnt++;\n\t\t},delay)\n\n  });\n};\n\n// createPromise(7, 1500)\n// \t.then(`✅ Fulfilled promise ${position} in ${delay}ms`)\n// \t.catch(`❌ Rejected promise ${position} in ${delay}ms`);\n  \n\n   //  setTimeout(() => {\n   //    // Change value of isSuccess variable to simulate request status\n   //    const isSuccess = Math.random() > 0.5;\n\n   //    if (isSuccess) {\n   //      resolve(\"success value\");\n   //    } else {\n   //      reject(\"error\");\n   //    }\n   //  }, delay);\n\n\n// function createPromise(position, delay) {\n// \tlet cnt = 1;\n// \t\t// const av = amount.value;\n// \t\t// const sv = step.value;\n// \t\tlet counter = setInterval(() => {\n// \t\t\t \tconst shouldResolve = Math.random() > 0.3;\n// \t\t\t\tif (shouldResolve) {\n// \t\t\t\t\t// Fulfill\n// \t\t\t\t} else {\n// \t\t\t\t\t// Reject\n// \t\t\t\t}\n// \t\t\t console.log(\"step:\", cnt,\" ms:\", cnt*delay);\n// \t\t\tif (cnt > position-1) {\n// \t\t\t\tclearInterval(counter);\n// \t\t\t}\n// \t\t\t// ++cnt;\n// \t\t\tcnt++;\n// \t\t},delay)\n// }\n\n// function handleSubmit(event) {\n// \tevent.preventDefault();\n// \tconst {\n// \t\telements: {delay,step,amount}\n// \t} = event.currentTarget;\n// \tconsole.log(\"delay \", delay.value);\n// \tconst dv = delay.value;\n// \tconst av = amount.value;\n// \tconst sv = step.value;\n\n// \tsetTimeout(() => {\n// \t\treturn new Promise(\n// \t\t\t(resolve, reject) => {\n// \t\t\tconst shouldResolve = Math.random() > 0.3;\t\n// \t\t\tif (shouldResolve) {\n// \t\t\t\tresolve({ sv, av });\n// \t\t\t \tconsole.log(\"STOP! function resolve\", { av, sv });\n// \t\t\t} else {\n// \t\t\t\treject({ av, sv });\n// \t\t\t\tconsole.log(\"STOP! function reject\", { av, sv });\n// \t\t\t}\n// \t\t}\n// \t)\n// \t}, dv);\n// \tconsole.log(\"START! function\");\n// \tevent.currentTarget.reset();\n// }\n\n// \t\t const {\n//     elements: { delay, step, amount}\n//   } = event.currentTarget;\n\t\t// let cnt = 1;\n\t\t// const dv = delay.value;\n\t\t// const sv = step.value;\n\t\t// let counter = setInterval(() => {\n\t\t// \tcreatePromise(cnt, sv);\n\t\t// \t// console.log(\"step:\", cnt,\" ms:\", cnt*sv,\" summ ms:\", Number(dv) + cnt*sv);\n\t\t// \tif (cnt > av-1) {\n\t\t// \t\tclearInterval(counter);\n\t\t// \t}\n\t\t// \t// ++cnt;\n\t\t// \tcnt++;\n\t\t// },sv)\n\n\n// function createPromise(position, delay) {\n// \tconst shouldResolve = Math.random() > 0.5;\n// \tconsole.log(\"shouldResolve:\", shouldResolve);\n// \tsetTimeout(() => {\n// \t\tif (shouldResolve) {\n// \t\t\t  resolve(\"Success! Value passed to resolve function\");\n//     } else {\n//       reject(\"Error! Error passed to reject function\");\n//     }\n// \t\t// return new Promise((resolve, reject) => {})\n//   }, position)\n// }\n\n\n// let cnt = 1;\n// \t\tconst av = amount.value;\n// \t\tconst sv = step.value;\n// \t\tlet counter = setInterval(() => {\n// \t\t\tcreatePromise(cnt, sv);\n// \t\t\t// console.log(\"step:\", cnt,\" ms:\", cnt*sv,\" summ ms:\", Number(dv) + cnt*sv);\n// \t\t\tif (cnt > av-1) {\n// \t\t\t\tclearInterval(counter);\n// \t\t\t}\n// \t\t\t// ++cnt;\n// \t\t\tcnt++;\n// \t\t},sv)\n\n//createPromise(2000, 5000);//delay\n\n// for (let i = 0; i < 10; i++) {}\n// const Amount = 100;\n// function createPromise(position, delay) {\n// \t// setTimeout(() => {}, position)\n// \t\t// for (let i = 0; i < Amount; i++) { }\n// \t\treturn new Promise((resolve, reject) => {\n// \t\t\tconst shouldResolve = Math.random() > 0.3;\n// \t\t\tif (shouldResolve) {\n// \t\t\t\tresolve(console.log(\"Fulfill\"));\n// \t\t\t} else {\n// \t\t\t\treject(console.log(\"Reject\"));\n// \t\t\t}\n// \t\t}\n// \t\t)\n\t\n// }\n\n"],"names":["document","forms","addEventListener","event","preventDefault","elements","delay","step","amount","currentTarget","console","log","value","dv","av","sv","setTimeout","$47d4ff9957288465$var$createPromise","then","catch","position","Promise","resolve","reject","cnt","counter","setInterval","Math","random","clearInterval"],"version":3,"file":"03-promises.971807f4.js.map"}