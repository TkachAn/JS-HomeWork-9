{"mappings":"gfACA,IAAAA,EAAAC,EAAA,SAEaC,SAASC,MAAM,GACvBC,iBAAiB,UAAU,SAACC,GAChCA,EAAMC,iBACN,IAEuBC,EAAnBF,EAAMG,cADTC,SAAWC,EAAKH,EAALG,MAAMC,EAAIJ,EAAJI,KAAKC,EAAML,EAANK,OAEvBC,QAAQC,IAAI,SAAUJ,EAAMK,OAC5B,IAAMC,EAAKN,EAAMK,MACXE,EAAKL,EAAOG,MACZG,EAAKP,EAAKI,MAChBV,EAAMG,cAAcW,QACpBC,YAAW,WAGTC,EAAcJ,EAAIC,GACjBI,KAAK,uBAAkCC,OAATN,EAAG,QAASM,OAAHL,EAAG,OAExCM,MAAI,sBAAiCD,OAATN,EAAG,QAASM,OAAHL,EAAG,SAG1CF,MAEJ,IAAMK,EAAgB,SAACI,EAASf,GAC9B,OAAO,IAAIgB,SAAQ,SAACC,EAASC,GAC3Bf,QAAQC,IAAI,SAAeS,OAANb,IACxB,IAAImB,EAAM,EAGLC,EAAUC,aAAY,WACHC,KAAKC,SAAW,IAErCN,EAAQ,qBAAoCJ,OAAfE,EAAS,QAAYF,OAANb,IAC5CG,QAAQC,IAAI,gBAAiBW,EAAU,OAAQI,EAAMnB,GACrDV,EAAAkC,OAAOC,QAAQ,qBAAoCZ,OAAfE,EAAS,QAAYF,OAANb,MAEnDkB,EAAO,oBAAmCL,OAAfE,EAAS,QAAYF,OAANb,IAC1CG,QAAQC,IAAI,eAAgBW,EAAU,OAAQI,EAAMnB,GACpDV,EAAAkC,OAAOE,QAAQ,oBAAmCb,OAAfE,EAAS,QAAYF,OAANb,KAG/CmB,EAAMJ,EAAS,GAClBY,cAAcP,GAEfD,MACCnB,O","sources":["src/js/03-promises.js"],"sourcesContent":["//import Notiflix from 'notiflix';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n// const form = document.querySelector(\".form\");\nconst form = document.forms[0];\nform.addEventListener(\"submit\", (event) => {\n\tevent.preventDefault();\n\tconst {\n\t\telements: {delay,step,amount}\n\t} = event.currentTarget;\n\tconsole.log(\"delay \", delay.value);\n\tconst dv = delay.value;\n\tconst av = amount.value;\n\tconst sv = step.value;\n\tevent.currentTarget.reset();\n\tsetTimeout(() => {\n\t\t// return new Promise((resolve, reject) => {\n\t\t// \tresolve({ av, sv });\n\t\t\tcreatePromise(av, sv)\n\t\t\t.then(`✅ Fulfilled promise ${av} in ${sv}ms`)\n\t\t\t\n\t\t\t.catch(`❌ Rejected promise ${av} in ${sv}ms`)\n\t\t\t;\n\t\t//})\n\t}, dv);\n});//.\nconst createPromise = (position,delay )=> {\n  return new Promise((resolve, reject) => {\n    console.log(`delay ${delay}`);\n\tlet cnt = 1;\n\t\t// const av = amount.value;\n\t\t// const sv = step.value;\n\t\tlet counter = setInterval(() => {\n\t\t\tconst shouldResolve = Math.random() > 0.3;\n\t\t\tif (shouldResolve) {\n\t\t\t\tresolve(`Fulfilled promise ${position} in ${delay}`);\n\t\t\t\tconsole.log(\"resolve step:\", position, \" ms:\", cnt * delay);\n\t\t\t\tNotify.success(`Fulfilled promise ${position} in ${delay}`);\t// Fulfill\n\t\t\t} else {\n\t\t\t\treject(`rejected promise ${position} in ${delay}`);\n\t\t\t\tconsole.log(\"reject step:\", position, \" ms:\", cnt * delay);\n\t\t\t\tNotify.failure(`rejected promise ${position} in ${delay}`);\t// Reject\n\t\t\t}\n\t\t\t// console.log(\"step:\", cnt,\" ms:\", cnt*delay);\n\t\t\tif (cnt > position-1) {\n\t\t\t\tclearInterval(counter);\n\t\t\t}\n\t\t\tcnt++;\n\t\t},delay)\n  });\n\t\n};\n\n// createPromise(7, 1500)\n// \t.then(`✅ Fulfilled promise ${position} in ${delay}ms`)\n// \t.catch(`❌ Rejected promise ${position} in ${delay}ms`);\n  \n\n   //  setTimeout(() => {\n   //    // Change value of isSuccess variable to simulate request status\n   //    const isSuccess = Math.random() > 0.5;\n\n   //    if (isSuccess) {\n   //      resolve(\"success value\");\n   //    } else {\n   //      reject(\"error\");\n   //    }\n   //  }, delay);\n\n\n// function createPromise(position, delay) {\n// \tlet cnt = 1;\n// \t\t// const av = amount.value;\n// \t\t// const sv = step.value;\n// \t\tlet counter = setInterval(() => {\n// \t\t\t \tconst shouldResolve = Math.random() > 0.3;\n// \t\t\t\tif (shouldResolve) {\n// \t\t\t\t\t// Fulfill\n// \t\t\t\t} else {\n// \t\t\t\t\t// Reject\n// \t\t\t\t}\n// \t\t\t console.log(\"step:\", cnt,\" ms:\", cnt*delay);\n// \t\t\tif (cnt > position-1) {\n// \t\t\t\tclearInterval(counter);\n// \t\t\t}\n// \t\t\t// ++cnt;\n// \t\t\tcnt++;\n// \t\t},delay)\n// }\n\n// function handleSubmit(event) {\n// \tevent.preventDefault();\n// \tconst {\n// \t\telements: {delay,step,amount}\n// \t} = event.currentTarget;\n// \tconsole.log(\"delay \", delay.value);\n// \tconst dv = delay.value;\n// \tconst av = amount.value;\n// \tconst sv = step.value;\n\n// \tsetTimeout(() => {\n// \t\treturn new Promise(\n// \t\t\t(resolve, reject) => {\n// \t\t\tconst shouldResolve = Math.random() > 0.3;\t\n// \t\t\tif (shouldResolve) {\n// \t\t\t\tresolve({ sv, av });\n// \t\t\t \tconsole.log(\"STOP! function resolve\", { av, sv });\n// \t\t\t} else {\n// \t\t\t\treject({ av, sv });\n// \t\t\t\tconsole.log(\"STOP! function reject\", { av, sv });\n// \t\t\t}\n// \t\t}\n// \t)\n// \t}, dv);\n// \tconsole.log(\"START! function\");\n// \tevent.currentTarget.reset();\n// }\n\n// \t\t const {\n//     elements: { delay, step, amount}\n//   } = event.currentTarget;\n\t\t// let cnt = 1;\n\t\t// const dv = delay.value;\n\t\t// const sv = step.value;\n\t\t// let counter = setInterval(() => {\n\t\t// \tcreatePromise(cnt, sv);\n\t\t// \t// console.log(\"step:\", cnt,\" ms:\", cnt*sv,\" summ ms:\", Number(dv) + cnt*sv);\n\t\t// \tif (cnt > av-1) {\n\t\t// \t\tclearInterval(counter);\n\t\t// \t}\n\t\t// \t// ++cnt;\n\t\t// \tcnt++;\n\t\t// },sv)\n\n\n// function createPromise(position, delay) {\n// \tconst shouldResolve = Math.random() > 0.5;\n// \tconsole.log(\"shouldResolve:\", shouldResolve);\n// \tsetTimeout(() => {\n// \t\tif (shouldResolve) {\n// \t\t\t  resolve(\"Success! Value passed to resolve function\");\n//     } else {\n//       reject(\"Error! Error passed to reject function\");\n//     }\n// \t\t// return new Promise((resolve, reject) => {})\n//   }, position)\n// }\n\n\n// let cnt = 1;\n// \t\tconst av = amount.value;\n// \t\tconst sv = step.value;\n// \t\tlet counter = setInterval(() => {\n// \t\t\tcreatePromise(cnt, sv);\n// \t\t\t// console.log(\"step:\", cnt,\" ms:\", cnt*sv,\" summ ms:\", Number(dv) + cnt*sv);\n// \t\t\tif (cnt > av-1) {\n// \t\t\t\tclearInterval(counter);\n// \t\t\t}\n// \t\t\t// ++cnt;\n// \t\t\tcnt++;\n// \t\t},sv)\n\n//createPromise(2000, 5000);//delay\n\n// for (let i = 0; i < 10; i++) {}\n// const Amount = 100;\n// function createPromise(position, delay) {\n// \t// setTimeout(() => {}, position)\n// \t\t// for (let i = 0; i < Amount; i++) { }\n// \t\treturn new Promise((resolve, reject) => {\n// \t\t\tconst shouldResolve = Math.random() > 0.3;\n// \t\t\tif (shouldResolve) {\n// \t\t\t\tresolve(console.log(\"Fulfill\"));\n// \t\t\t} else {\n// \t\t\t\treject(console.log(\"Reject\"));\n// \t\t\t}\n// \t\t}\n// \t\t)\n\t\n// }\n\n"],"names":["$h6c0i","parcelRequire","document","forms","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay","step","amount","console","log","value","dv","av","sv","reset","setTimeout","$ce04d3a99e08e73b$var$createPromise","then","concat","catch","position","Promise","resolve","reject","cnt","counter","setInterval","Math","random","Notify","success","failure","clearInterval"],"version":3,"file":"03-promises.cb09f6a2.js.map"}